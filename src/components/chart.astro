<div style=" width: 100%;
            max-width: 100%;">
  <canvas id="myChart" style="width: 100%; height:auto; min-height: 320px;"
  ></canvas>
  <p
    id="noteText"
    style="font-size: 15px; font-style: italic; text-align: left; margin-top: 10px;">
    * Energy profile generated
  </p>
  <p
    style="font-size: 15px; font-style: italic; text-align: left; margin-top: 10px;">
    * Model is trained on <a
      class="text-blue-600"
      href="https://www.nyiso.com/energy-market-operational-data"
      target="_blank"
      rel="noopener noreferrer">NYISO market pricing data</a
    >
  </p>
</div>
<script>
  import Chart from "chart.js/auto";

  async function fetchHourlyRates() {
    const response = await fetch("https://app.nerv.energy/fetch_pricing_data/");
    return await response.json();
  }

  async function fetchDataAndRenderChart(hourlyRates) {
    const total_energy = 45.0;
    const curtailment_limit = 3.0;

    const response = await fetch("https://app.nerv.energy/predict/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        hourly_rates: hourlyRates,
        total_energy,
        curtailment_limit,
      }),
    });
    return await response.json();
  }

  function renderChart(hourlyRates, generatedProfile) {
    const ctx = document.getElementById("myChart").getContext("2d");
    new Chart(ctx, {
      type: "line",
      data: {
        labels: Array.from({ length: 24 }, (_, i) => `${i}:00`),
        datasets: [
          {
            label: "Hourly Rates",
            data: hourlyRates,
            borderColor: "rgba(75, 192, 192, 1)",
            backgroundColor: "rgba(75, 192, 192, 0.2)",
            fill: false,
            tension: 0.1,
            yAxisID: "y",
            pointRadius: 0,
          },
          {
            label: "Generated Energy Profile",
            data: generatedProfile,
            borderColor: "rgba(153, 102, 255, 1)",
            backgroundColor: "rgba(153, 102, 255, 0.2)",
            fill: false,
            tension: 0.1,
            yAxisID: "y1",
            pointRadius: 0,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        aspectRatio: 1.4,
        interaction: {
          mode: "index",
          intersect: false,
        },
        scales: {
          x: {
            title: {
              display: true,
              text: "Hour of the Day",
            },
            grid: {
              display: false,
            },
          },
          y: {
            type: "linear",
            display: true,
            position: "left",
            title: {
              display: true,
              text: "Rate ($/MWh)",
            },
            grid: {
              display: false,
            },
          },
          y1: {
            type: "linear",
            display: true,
            position: "right",
            title: {
              display: true,
              text: "Allocated Energy (kWh)",
            },
            grid: {
              display: false,
            },
          },
        },
        plugins: {
          tooltip: {
            enabled: false,
          },
        },
      },
    });
  }

  async function init() {
    try {
      const hourlyRatesResponse = await fetchHourlyRates();
      const hourlyRates = hourlyRatesResponse.hourly_rates;

      const predictionData = await fetchDataAndRenderChart(hourlyRates);
      renderChart(hourlyRates, predictionData.generated_profile);

      document.getElementById("noteText").innerHTML +=
        ` for New York City ${getRelevantDate()}`;
    } catch (error) {
      console.error("Error fetching or rendering data:", error);
    }
  }

  function getRelevantDate() {
    const now = new Date();
    const currentHour = now.getHours();

    if (currentHour >= 10) {
      // If the current time is after 10 AM, return tomorrow's date
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      return tomorrow.toLocaleDateString("en-US", {
        month: "long",
        day: "numeric",
        year: "numeric",
      });
    } else {
      // If the current time is before 10 AM, return today's date
      return now.toLocaleDateString("en-US", {
        month: "long",
        day: "numeric",
        year: "numeric",
      });
    }
  }

  init();
</script>
